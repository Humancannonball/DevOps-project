name: App Deploy

on:
  workflow_dispatch:

jobs:
  helm-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Parse config.yml
        id: parse_config
        run: |
          CONFIG_FILE=azure-aks-terraform/config.yml
          RESOURCE_GROUP_NAME=$(yq e '.ResourceGroups[0].Name' $CONFIG_FILE)
          AKS_CLUSTER_NAME=$(yq e '.AzureKubernetesCluster.Name' $CONFIG_FILE)
          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV

      - name: Log in to Azure
        run: |
            az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
            # Alternatively, use an Azure login action

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP_NAME --name $AKS_CLUSTER_NAME

      - name: Install Flux CLI
        run: |
          curl -s https://fluxcd.io/install.sh | sudo bash

      - name: Create Namespace
        run: |
          kubectl create namespace mark || true  

      - name: Create or Update GitHub Token Secret
        run: |
          kubectl delete secret flux-git-token --namespace mark --ignore-not-found
          kubectl create secret generic flux-git-token \
            --from-literal=username=Humancannonball \
            --from-literal=password=${{ secrets.GIT_TOKEN }} \
            --namespace mark

      - name: Create or Update ACR Secret
        run: |
          kubectl delete secret acr-secret --namespace mark --ignore-not-found
          kubectl create secret docker-registry acr-secret \
            --docker-server=${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io \
            --docker-username=${{ secrets.ARM_CLIENT_ID }} \
            --docker-password=${{ secrets.ARM_CLIENT_SECRET }} \
            --docker-email=${{ secrets.AZURE_EMAIL }} \
            --namespace mark

      - name: Check if Flux is Bootstrapped
        run: |
          kubectl get namespace flux-system || flux bootstrap github \
            --owner=Humancannonball \
            --repository=DevOps-project \
            --branch=master \
            --path=clusters/my-cluster
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      
      - name: Apply Flux YAML files
        run: |
          kubectl apply -f clusters/my-cluster/gitrepository.yaml
          kubectl apply -f clusters/my-cluster/helm-release.yaml
        
      - name: Add Ingress-NGINX Helm Repository
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

      - name: Install NGINX Ingress Controller
        run: |
          if helm ls -n ingress-nginx | grep ingress-nginx; then
            echo "Ingress-NGINX is already installed"
          else
            helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace
          fi

      - name: Verify Deployment
        run: |
          kubectl get pods --namespace mark
          kubectl get pods --namespace mark -l app.kubernetes.io/name=web
          kubectl get pods --namespace mark -l app.kubernetes.io/name=turing-service
          kubectl get pods --namespace mark -l app.kubernetes.io/name=prisoner-service
          
      - name: Verify Flux Installation
        run: |
          kubectl get pods --namespace flux-system

      - name: Verify Ingress Controller
        run: |
          kubectl get pods --namespace ingress-nginx

      - name: Verify Services
        run: |
          kubectl get svc --namespace mark

      - name: Verify Ingress
        run: |
          kubectl get ingress --namespace mark

      - name: Rollback if Deployment Fails
        if: failure()
        run: |
          git revert -m 1 HEAD
          git push origin HEAD:master